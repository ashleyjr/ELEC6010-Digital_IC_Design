ncverilog: 10.20-s073: (c) Copyright 1995-2011 Cadence Design Systems, Inc.
TOOL:	ncverilog	10.20-s073: Started on Oct 24, 2013 at 11:12:14 BST
ncverilog
	-sv
	+gui
	+ncaccess+r
	-y
	library
	+libext+.sv
	+incdir+library
	system.sv
	+tcl+system.tcl
file: library/processor.sv
	module library.processor:sv
		errors: 0, warnings: 0
file: library/control.sv
	module library.control:sv
		errors: 0, warnings: 0
file: library/datapath.sv
	module library.datapath:sv
		errors: 0, warnings: 0
file: library/memory.sv
	module library.memory:sv
		errors: 0, warnings: 0
file: library/alu.sv
	module library.alu:sv
		errors: 0, warnings: 0
		Caching library 'library' ....... Done
		Caching library 'worklib' ....... Done
	Elaborating the design hierarchy:
	Building instance overlay tables: .................... Done
	Generating native compiled code:
		library.alu:sv <0x0d6cceeb>
			streams:   2, words:   778
		library.control:sv <0x6ba178f1>
			streams:  12, words:  4289
		library.datapath:sv <0x3fe155b0>
			streams:   4, words:   923
		library.memory:sv <0x499db098>
			streams:   4, words:  3891
		worklib.system:sv <0x0e945e9b>
			streams:  14, words: 10297
	Loading native compiled code:     .................... Done
	Building instance specific data structures.
	Design hierarchy summary:
		                  Instances  Unique
		Modules:                  6       6
		Resolved nets:            0       1
		Registers:               29      29
		Scalar wires:             6       -
		Vectored wires:          12       -
		Always blocks:            6       6
		Initial blocks:           3       3
		Cont. assignments:       10      12
		Pseudo assignments:       2       2
		Simulation timescale:  10ps
	Writing initial simulation snapshot: worklib.system:sv

-------------------------------------
Relinquished control to SimVision...
ncsim> 
ncsim> source /opt/cad/soft/cadence/ius/tools/inca/files/ncsimrc
ncsim> # =========================================================================
ncsim> # SimVision command script system.tcl
ncsim> 
ncsim> simvision {
> 
>  # =========================================================================
>  # Wave Window
> 
>   # Open new waveform window
> 
>     window new WaveWindow  -name  "Waves for a Simple Microprocessor"
>     window  geometry  "Waves for a Simple Microprocessor"  1010x325+50+25
>     waveform  using  "Waves for a Simple Microprocessor"
> 
>   # Add basic signals to wave window
> 
>     waveform  add  -signals  system.Clock
>     waveform  add  -signals  system.nReset
>     waveform  add  -signals  system.Processor.Address
>     waveform  add  -signals  system.Processor.Data_bus
>     waveform  add  -signals  system.Processor.Mem_Write
> 
>  # =========================================================================
>  # Register Window
> 
>   # Open new register window
> 
>     window new RegisterWindow  -name  "Registers for a Simple Microprocessor"
>     window  geometry  "Registers for a Simple Microprocessor"  700x550+0+350
>     register  using  "Registers for a Simple Microprocessor"
> 
>   # Add signal values (specified location and format)
>   
>  # =========================================================================
> 
>     register addtype -type text -x0 10 -y0 10 -text {Control} \
>       -fill red
> 
>     register addtype -type text -x0 10 -y0 40 -text {State}
> 
>     register addtype -type signalvalue -x0 150 -y0 40 -radix %s \
>       system.State
> 
>     register addtype -type text -x0 10 -y0 70 -text {PC}
> 
>     register addtype -type signalvalue -x0 150 -y0 70 -radix %d \
>       system.Processor.Control.Program_Counter
> 
>     register addtype -type text -x0 10 -y0 95 -text {Instruction (hex)}
> 
>     register addtype -type signalvalue -x0 150 -y0 95 -radix %x \
>       system.Processor.Control.Instruction_Register
> 
>     register addtype -type text -x0 10 -y0 110 -text \
>       {  (assembly language)}
> 
>     register addtype -type signalvalue -x0 150 -y0 110 -radix %s \
>       system.InstructionText
> 
>  # =========================================================================
>     register addtype -type line -x0 300 -y0 5 -x1 300 -y1 135 \
>       -fill green
>  # =========================================================================
> 
>     register addtype -type text -x0 310 -y0 10 -text {Datapath} \
>       -fill red
> 
>     register addtype -type text -x0 310 -y0 70 -text {Accumulator}
> 
>     register addtype -type signalvalue -x0 450 -y0 70 -radix %d \
>       system.Processor.Datapath.Accumulator
> 
>  # =========================================================================
>     register addtype -type line -x0 5 -y0 135 -x1 595 -y1 135 \
>       -fill green
>  # =========================================================================
> 
>     register addtype -type text        -x0 10 -y0 145 -text {Memory (code)} \
>       -fill red
> 
>     register addtype -type text        -x0 10 -y0 170 -text {[0]}
>     register addtype -type signalvalue -x0 40 -y0 170 -radix %x \
>       {system.Processor.Memory.Data_stored[0]}
>     register addtype -type signalvalue -x0 100 -y0 170 -radix %s \
>       {system.DisassemblyListing[0]}
> 
>     register addtype -type text        -x0 10 -y0 190 -text {[1]}
>     register addtype -type signalvalue -x0 40 -y0 190 -radix %x \
>       {system.Processor.Memory.Data_stored[1]}
>     register addtype -type signalvalue -x0 100 -y0 190 -radix %s \
>       {system.DisassemblyListing[1]}
> 
>     register addtype -type text        -x0 10 -y0 210 -text {[2]}
>     register addtype -type signalvalue -x0 40 -y0 210 -radix %x \
>       {system.Processor.Memory.Data_stored[2]}
>     register addtype -type signalvalue -x0 100 -y0 210 -radix %s \
>       {system.DisassemblyListing[2]}
> 
>     register addtype -type text        -x0 10 -y0 230 -text {[3]}
>     register addtype -type signalvalue -x0 40 -y0 230 -radix %x \
>       {system.Processor.Memory.Data_stored[3]}
>     register addtype -type signalvalue -x0 100 -y0 230 -radix %s \
>       {system.DisassemblyListing[3]}
> 
>     register addtype -type text        -x0 10 -y0 250 -text {[4]}
>     register addtype -type signalvalue -x0 40 -y0 250 -radix %x \
>       {system.Processor.Memory.Data_stored[4]}
>     register addtype -type signalvalue -x0 100 -y0 250 -radix %s \
>       {system.DisassemblyListing[4]}
> 
>     register addtype -type text        -x0 10 -y0 270 -text {[5]}
>     register addtype -type signalvalue -x0 40 -y0 270 -radix %x \
>       {system.Processor.Memory.Data_stored[5]}
>     register addtype -type signalvalue -x0 100 -y0 270 -radix %s \
>       {system.DisassemblyListing[5]}
> 
>     register addtype -type text        -x0 10 -y0 290 -text {[6]}
>     register addtype -type signalvalue -x0 40 -y0 290 -radix %x \
>       {system.Processor.Memory.Data_stored[6]}
>     register addtype -type signalvalue -x0 100 -y0 290 -radix %s \
>       {system.DisassemblyListing[6]}
> 
>     register addtype -type text        -x0 10 -y0 310 -text {[7]}
>     register addtype -type signalvalue -x0 40 -y0 310 -radix %x \
>       {system.Processor.Memory.Data_stored[7]}
>     register addtype -type signalvalue -x0 100 -y0 310 -radix %s \
>       {system.DisassemblyListing[7]}
> 
>     register addtype -type text        -x0 10 -y0 330 -text {[8]}
>     register addtype -type signalvalue -x0 40 -y0 330 -radix %x \
>       {system.Processor.Memory.Data_stored[8]}
>     register addtype -type signalvalue -x0 100 -y0 330 -radix %s \
>       {system.DisassemblyListing[8]}
> 
>     register addtype -type text        -x0 10 -y0 350 -text {[9]}
>     register addtype -type signalvalue -x0 40 -y0 350 -radix %x \
>       {system.Processor.Memory.Data_stored[9]}
>     register addtype -type signalvalue -x0 100 -y0 350 -radix %s \
>       {system.DisassemblyListing[9]}
> 
>     register addtype -type text        -x0 10 -y0 380 -text {[99]}
>     register addtype -type signalvalue -x0 40 -y0 380 -radix %x \
>       {system.Processor.Memory.Data_stored[99]}
>     register addtype -type signalvalue -x0 100 -y0 380 -radix %s \
>       {system.DisassemblyListing[99]}
> 
>  # =========================================================================
>     register addtype -type line -x0 250 -y0 135 -x1 250 -y1 400 \
>       -fill green
>  # =========================================================================
> 
>     register addtype -type text        -x0 260 -y0 145 \
>       -text {Memory (constants)} -fill red
> 
>     register addtype -type text        -x0 260 -y0 170 -text {[20]}
>     register addtype -type signalvalue -x0 310 -y0 170 -radix %d \
>       {system.Processor.Memory.Data_stored[20]}
>     register addtype -type text        -x0 260 -y0 190 -text {[21]}
>     register addtype -type signalvalue -x0 310 -y0 190 -radix %d \
>       {system.Processor.Memory.Data_stored[21]}
> 
>  # =========================================================================
>     register addtype -type line -x0 450 -y0 135 -x1 450 -y1 400 \
>       -fill green
>  # =========================================================================
> 
>     register addtype -type text        -x0 460 -y0 145 -text {Memory (data)} \
>       -fill red
> 
>     register addtype -type text        -x0 460 -y0 170 -text {[22]}
>     register addtype -type signalvalue -x0 510 -y0 170 -radix %d \
>       {system.Processor.Memory.Data_stored[22]}
>     register addtype -type text        -x0 460 -y0 190 -text {[23]}
>     register addtype -type signalvalue -x0 510 -y0 190 -radix %d \
>       {system.Processor.Memory.Data_stored[23]}
>     register addtype -type text        -x0 460 -y0 210 -text {[24]}
>     register addtype -type signalvalue -x0 510 -y0 210 -radix %d \
>       {system.Processor.Memory.Data_stored[24]}
>     register addtype -type text        -x0 460 -y0 230 -text {[25]}
>     register addtype -type signalvalue -x0 510 -y0 230 -radix %d \
>       {system.Processor.Memory.Data_stored[25]}
> 
> }
ncsim> 
ncsim> # =========================================================================
ncsim> # Probe
ncsim> 
ncsim>   # Any signals included in register window but not in waveform window
ncsim>   # should be probed
ncsim> 
ncsim>     probe -create -shm system.State
Created default SHM database ncsim.shm
Created probe 1
ncsim>     probe -create -shm system.Processor.Control.Program_Counter
Created probe 2
ncsim>     probe -create -shm system.Processor.Control.Instruction_Register
Created probe 3
ncsim>     probe -create -shm system.Processor.Datapath.Accumulator
Created probe 4
ncsim>     probe -create -shm system.InstructionText
Created probe 5
ncsim>     probe -create -shm system.Processor.Memory.Data_stored
Created probe 6
ncsim>     probe -create -shm system.DisassemblyListing
Created probe 7
ncsim> # =========================================================================
ncsim> probe -create -shm system.Clock system.nReset system.Processor.Address system.Processor.Data_bus system.Processor.Mem_Write
Created probe 8
ncsim> run
Terminating at instruction 99

Simulation stopped via $stop(1) at time 97250 NS + 0
ncsim> TOOL:	ncverilog	10.20-s073: Exiting on Oct 24, 2013 at 11:37:37 BST  (total: 00:25:23)
